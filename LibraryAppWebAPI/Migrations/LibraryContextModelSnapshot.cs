// <auto-generated />
using System;
using LibraryAppWebAPI.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryAppWebAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryAppWebAPI.Base.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalAvailableCopies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Title");

                    b.HasDiscriminator().HasValue("Title");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1990, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "John",
                            LastName = "Doe",
                            PersonalId = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1985, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jane",
                            LastName = "Smith",
                            PersonalId = "987654321"
                        });
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContext")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MessageSubject")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SendData")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MemberId = 1,
                            MessageContext = "Dear John Doe, we are delighted to welcome you to our library. Explore our collection and enjoy our services!",
                            MessageSubject = "Welcome to the Library!",
                            SendData = new DateTime(2025, 1, 2, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7302)
                        },
                        new
                        {
                            Id = 2,
                            MemberId = 2,
                            MessageContext = "Dear Jane Smith, we are delighted to welcome you to our library. Explore our collection and enjoy our services!",
                            MessageSubject = "Welcome to the Library!",
                            SendData = new DateTime(2025, 1, 2, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7306)
                        });
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.QueueItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeAdded")
                        .HasColumnType("datetime2");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TitleId");

                    b.ToTable("QueueItems");
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.RentalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("MaxReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesProlongued")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<int>("TitleType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TitleId");

                    b.ToTable("RentalEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxReturnDate = new DateTime(2025, 1, 16, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7264),
                            MemberId = 1,
                            RentedDate = new DateTime(2024, 12, 26, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7257),
                            TimesProlongued = 0,
                            TitleId = 1,
                            TitleType = 1
                        },
                        new
                        {
                            Id = 2,
                            MaxReturnDate = new DateTime(2025, 2, 2, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7270),
                            MemberId = 2,
                            RentedDate = new DateTime(2024, 12, 23, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7270),
                            TimesProlongued = 1,
                            TitleId = 2,
                            TitleType = 1
                        },
                        new
                        {
                            Id = 3,
                            MaxReturnDate = new DateTime(2025, 1, 8, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7272),
                            MemberId = 1,
                            RentedDate = new DateTime(2025, 1, 2, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7271),
                            ReturnDate = new DateTime(2025, 1, 7, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7272),
                            TimesProlongued = 0,
                            TitleId = 3,
                            TitleType = 2
                        },
                        new
                        {
                            Id = 4,
                            MaxReturnDate = new DateTime(2025, 1, 5, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7274),
                            MemberId = 2,
                            RentedDate = new DateTime(2024, 12, 29, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7274),
                            ReturnDate = new DateTime(2025, 1, 3, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7275),
                            TimesProlongued = 0,
                            TitleId = 4,
                            TitleType = 2
                        },
                        new
                        {
                            Id = 5,
                            MaxReturnDate = new DateTime(2024, 12, 13, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7276),
                            MemberId = 1,
                            RentedDate = new DateTime(2024, 12, 3, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7276),
                            ReturnDate = new DateTime(2024, 12, 15, 16, 59, 55, 689, DateTimeKind.Utc).AddTicks(7277),
                            TimesProlongued = 0,
                            TitleId = 1,
                            TitleType = 1
                        });
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.Book", b =>
                {
                    b.HasBaseType("LibraryAppWebAPI.Base.Title");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Book");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "George Orwell",
                            AvailableCopies = 5,
                            Name = "1984",
                            TotalAvailableCopies = 5,
                            ISBN = "978-0451524935",
                            NumberOfPages = 328
                        },
                        new
                        {
                            Id = 2,
                            Author = "Aldous Huxley",
                            AvailableCopies = 3,
                            Name = "Brave New World",
                            TotalAvailableCopies = 3,
                            ISBN = "978-0060850524",
                            NumberOfPages = 268
                        });
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.Dvd", b =>
                {
                    b.HasBaseType("LibraryAppWebAPI.Base.Title");

                    b.Property<int>("NumberOfMinutes")
                        .HasColumnType("int");

                    b.Property<int>("PublishYear")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Dvd");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Author = "Christopher Nolan",
                            AvailableCopies = 4,
                            Name = "Inception",
                            TotalAvailableCopies = 4,
                            NumberOfMinutes = 148,
                            PublishYear = 2010
                        },
                        new
                        {
                            Id = 4,
                            Author = "Steven Spielberg",
                            AvailableCopies = 2,
                            Name = "Jurassic Park",
                            TotalAvailableCopies = 2,
                            NumberOfMinutes = 127,
                            PublishYear = 1993
                        });
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.Message", b =>
                {
                    b.HasOne("LibraryAppWebAPI.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.QueueItem", b =>
                {
                    b.HasOne("LibraryAppWebAPI.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAppWebAPI.Base.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("LibraryAppWebAPI.Models.RentalEntry", b =>
                {
                    b.HasOne("LibraryAppWebAPI.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryAppWebAPI.Base.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Title");
                });
#pragma warning restore 612, 618
        }
    }
}
